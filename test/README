
#include <RadioLib.h>
SPIClass radio_SPI(HSPI);
SPISettings __spi_setting{1000000, MSBFIRST, SPI_MODE0};
nRF24 radio = new Module(3, 7, 2, -1, radio_SPI, __spi_setting);
// flag to indicate that a packet was received
volatile bool receivedFlag = false;
unsigned long lastReceiveTime = 0; // 上次接收的时间
unsigned long currentReceiveTime;  // 当前接收时间
unsigned long receiveInterval;     // 接收时间间隔

// this function is called when a complete packet
// is received by the module
// IMPORTANT: this function MUST be 'void' type
//            and MUST NOT have any arguments!
#if defined(ESP8266) || defined(ESP32)
ICACHE_RAM_ATTR
#endif
void setFlag(void)
{
  // we got a packet, set the flag
  receivedFlag = true;
}
#define SEND
#ifdef SEND
void setup()
{
  Serial.begin(115200);

  // initialize nRF24 with default settings
  Serial.print(F("[nRF24] Initializing ... "));
  radio_SPI.begin(4, 6, 5, 3);
  int state = radio.begin(2400, 1000, -12, 5);
  if (state == RADIOLIB_ERR_NONE)
  {
    Serial.println(F("success!"));
  }
  else
  { 
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true)
      ;
  }
  radio.setCrcFiltering(true);
  radio.setAutoAck(true);
  radio.setBitRate(2000);
  Module *mod = radio.getMod();
  mod->SPIsetRegValue(RADIOLIB_NRF24_REG_FEATURE, RADIOLIB_NRF24_DPL_ON | RADIOLIB_NRF24_ACK_PAY_ON | RADIOLIB_NRF24_DYN_ACK_ON, 2, 0);
  uint8_t value = mod->SPIreadRegister(RADIOLIB_NRF24_REG_FEATURE);
  Serial.print("value = ");
  Serial.println(value);
  // set transmit address
  // NOTE: address width in bytes MUST be equal to the
  //       width set in begin() or setAddressWidth()
  //       methods (5 by default)
  byte addr[] = {0x01, 0x23, 0x45, 0x67, 0x89};
  Serial.print(F("[nRF24] Setting transmit pipe ... "));
  state = radio.setTransmitPipe(addr);
  if (state == RADIOLIB_ERR_NONE)
  {
    Serial.println(F("success!"));
  }
  else
  {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true)
      ;
  }
}

// counter to keep track of transmitted packets
int count = 0;
unsigned long lastSendTime = 0; // 上次发送的时间
unsigned long currentTime;      // 当前时间
unsigned long interval;         // 时间间隔
void loop()
{
  // 每次发送之前记录当前时间
  currentTime = millis();

  // 计算时间间隔
  interval = currentTime - lastSendTime;

  // 打印发送状态
  // Serial.print(F("[nRF24] Transmitting packet ... "));

  // 创建发送内容字符串
  String str = String(count++) + " Interval: " + String(interval);

  // 发送数据
  int state = radio.transmit(str);

  if (state == RADIOLIB_ERR_NONE)
  {
    // 发送成功
    // Serial.println(F("success!"));
  }
  else if (state == RADIOLIB_ERR_PACKET_TOO_LONG)
  {
    // 数据包太长
    // Serial.println(F("too long!"));
  }
  else if (state == RADIOLIB_ERR_ACK_NOT_RECEIVED)
  {
    // 未收到确认
    // Serial.println(F("ACK not received!"));
  }
  else if (state == RADIOLIB_ERR_TX_TIMEOUT)
  {
    // 发送超时
    // Serial.println(F("timeout!"));
  }
  else
  {
    // 其他错误
    // Serial.print(F("failed, code "));
    // Serial.println(state);
  }

  // 更新上次发送的时间
  lastSendTime = currentTime;
  delay(1);
}
#else

void setup()
{
  Serial.begin(115200);

  // initialize nRF24 with default settings
  Serial.print(F("[nRF24] Initializing ... "));
  radio_SPI.begin(4, 6, 5, 3);
  int state = radio.begin(2400, 1000, -12, 5);
  if (state == RADIOLIB_ERR_NONE)
  {
    Serial.println(F("success!"));
  }
  else
  {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true)
      ;
  }
  radio.setAutoAck(true);

  // set receive pipe 0 address
  // NOTE: address width in bytes MUST be equal to the
  //       width set in begin() or setAddressWidth()
  //       methods (5 by default)
  Serial.print(F("[nRF24] Setting address for receive pipe 0 ... "));
  byte addr[] = {0x01, 0x23, 0x45, 0x67, 0x89};
  state = radio.setReceivePipe(0, addr);
  if (state == RADIOLIB_ERR_NONE)
  {
    Serial.println(F("success!"));
  }
  else
  {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true)
      ;
  }

  // set the function that will be called
  // when new packet is received
  radio.setPacketReceivedAction(setFlag);

  // start listening
  Serial.print(F("[nRF24] Starting to listen ... "));
  state = radio.startReceive();
  if (state == RADIOLIB_ERR_NONE)
  {
    Serial.println(F("success!"));
  }
  else
  {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true)
      ;
  }

  // if needed, 'listen' mode can be disabled by calling
  // any of the following methods:
  //
  // radio.standby()
  // radio.sleep()
  // radio.transmit();
  // radio.receive();
  // radio.readData();
}

void loop()
{
  if (receivedFlag)
  {
    // 重置标志
    receivedFlag = false;

    // 记录当前接收的时间
    currentReceiveTime = millis();

    // 计算接收间隔
    receiveInterval = currentReceiveTime - lastReceiveTime;

    // 创建接收的数据字符串
    String str;
    int state = radio.readData(str);

    if (state == RADIOLIB_ERR_NONE)
    {
      // 数据包成功接收
      Serial.print(F("[nRF24] Received packet!"));
      Serial.print("\t");
      // 打印数据包的内容
      Serial.print(F("[nRF24] Data:\t\t"));
      Serial.print(str);
      Serial.print("\t");
      // 打印接收间隔
      Serial.print(F("[nRF24] Receive interval:\t"));
      Serial.print(receiveInterval);
      Serial.println(F(" ms"));
    }
    else
    {
      // 其他错误发生
      Serial.print(F("[nRF24] Failed, code "));
      Serial.println(state);
    }

    // 更新上次接收的时间
    lastReceiveTime = currentReceiveTime;

    // 将模块放回接收模式
    radio.startReceive();
  }
}

#endif // DEBUG
